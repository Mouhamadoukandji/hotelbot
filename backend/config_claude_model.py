import anthropic
import os
from dotenv import load_dotenv

load_dotenv()

SCHEMA_CONTEXT = """
Tu es un expert SQL Oracle sp√©cialis√© dans la r√©servation h√¥teli√®re.

SCHEMA DE LA BASE :
- HOTELS(NUMHO, NOMHO, RUEADRHO, VILLEHO, NBETOILESHO)
- TYPESCHAMBRE(NUMTY, NOMTY, PRIXTY) 
- CHAMBRES(NUMCH, NUMHO, NUMTY)
- CLIENTS(NUMCL, NOMCL, PRENOMCL, RUEADRCL, VILLECL)
- RESERVATIONS(NUMCL, NUMHO, NUMTY, DATEA, NBJOURS, NBCHAMBRES)
- OCCUPATIONS(NUMCL, NUMHO, NUMCH, DATEA, DATED)

R√®gles m√©tier :
- Les prix sont en euros
- DATEA = date d'arriv√©e
- DATED = date de d√©part
- NBJOURS = intervalle en jours
"""

SCHEMA_TRANS = """"
"""
client = anthropic.Anthropic(
    # defaults to os.environ.get("ANTHROPIC_API_KEY")
    api_key=os.getenv("CLAUDE_API_KEY"),
)


def generer_requete_sql(question_utilisateur):
    prompt = f"""
    Question: {question_utilisateur}

    G√©n√®re UNIQUEMENT la requ√™te SQL Oracle sans explications.
    Utilise le sch√©ma fourni.
    
    Si la requ√™te tente de faire autre chose (comme demande de suppression ou de modification)
     qu'une lecteur G√©n√®re une chaine VIDE
    """


    response = client.messages.create(
        model="claude-sonnet-4-5",
        max_tokens=1024,
        system=SCHEMA_CONTEXT,
        messages=[
            {"role": "user", "content": prompt},
        ]
    )
    reponse_brute = response.content[0]
    requete_sql = extraire_sql_proprement(reponse_brute)
    return requete_sql

def sql_to_translation(requete_sql):
    prompt =  f"""
        En tant qu'assistant h√¥telier expert, votre mission est de transformer des r√©sultats bruts de base de donn√©es en une r√©ponse √©l√©gante, chaleureuse et facile √† comprendre pour un client.

        CONTEXTE :
        Un client a pos√© cette question : "{requete_sql}"
        
       

        VOTRE MISSION :
        Cr√©ez une r√©ponse qui :
        1. üåü Commence par une phrase d'accueil chaleureuse
        2. üìä Pr√©sente les r√©sultats de mani√®re claire et organis√©e
        3. üí´ Met en valeur les informations importantes
        4. üè® Utilise un vocabulaire h√¥telier professionnel mais accessible
        5. ü§ù Se termine par une proposition d'aide suppl√©mentaire

        TON :
        - Professionnel et √©l√©gant
        - Chaleureux et attentionn√©
        - Clair et p√©dagogique
        - Jamais technique ou jargonnant

        FORMATAGE :
        - Utilisez des √©mojis discr√®tement pour a√©rer le texte
        - Structurez avec des sauts de ligne naturels
        - Mettez en gras les informations importantes
        - Soyez concis mais complet

        Exemple de structure :
        "Je suis ravi de vous pr√©senter les options correspondant √† votre recherche...
        
        Voici ce que j'ai trouv√© pour vous :
        ‚Ä¢ [Point cl√© 1]
        ‚Ä¢ [Point cl√© 2]
        ‚Ä¢ [Point cl√© 3]
        
        [Conclusion et proposition d'aide]"

        Maintenant, transformez ces r√©sultats bruts en une magnifique r√©ponse client.
        """
    response = client.messages.create(
        model="claude-sonnet-4-5",
        max_tokens=1024,
        messages=[
            {"role": "user", "content": prompt},
        ]
    )

    return response.content


def extraire_sql_proprement(reponse_claude):
    texte_brut = reponse_claude.text

    debut = texte_brut.find("```sql")
    if debut != -1:
        debut += 6
        fin = texte_brut.find("```", debut)
        if fin != -1:
            sql = texte_brut[debut:fin].strip()
            return sql
    debut = texte_brut.find("```")
    if debut != -1:
        debut += 3
        fin = texte_brut.find("```", debut)
        if fin != -1:
            sql = texte_brut[debut:fin].strip()
            if sql.lower().startswith("sql"):
                sql = sql[3:].strip()
            return sql

    return texte_brut.strip()


def formater_elegant(reponse_claude):

    texte_brut = reponse_claude.text if hasattr(reponse_claude, 'text') else str(reponse_claude)

    prompt = f"""
    Transformez cette r√©ponse en un message magnifiquement format√© pour une application de r√©servation h√¥teli√®re de luxe :

    {texte_brut}

    STYLE √Ä APPLIQUER :
    üí´ Ton √©l√©gant et raffin√©
    üè® Vocabulaire h√¥telier de prestige
    ‚ú® Formatage Markdown soign√©
    üåü Emojis discrets mais impactants
    üìù Structure a√©r√©e et professionnelle

    FORMATAGE :
    - **Noms d'h√¥tels en gras**
    - *Adresses en italique*  
    - Liste √† puces avec emojis
    - Paragraphes bien espac√©s
    - Ponctuation soign√©e

    Retournez uniquement le texte format√©.
    """

    response = client.messages.create(
        model="claude-sonnet-4-5",
        max_tokens=1024,
        messages=[
            {"role": "user", "content": prompt},
        ]
    )

    return response.content[0].text

print(generer_requete_sql("Quels h√¥tels 4 √©toiles √† Paris ?"))